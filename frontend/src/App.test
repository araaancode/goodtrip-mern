import React, { useEffect, Suspense, lazy } from "react";
import {
  BrowserRouter as Router,
  Route,
  Routes,
  Navigate,
} from "react-router-dom";

// hooks
import useUserAuthStore from "./landing/store/authStore";
import { useCookAuthStore } from "./cooks/stores/authStore"; // Changed from default to named import

import axios from "axios";

// landing pages (Kept non-lazy for frequently used components)
import IndexLayout from "./landing/components/Layout";
import IndexPage from "./landing/pages/IndexPage";
import LoginPage from "./landing/pages/LoginPage";
import RegisterPage from "./landing/pages/RegisterPage";
import ForgotPasswordPage from "./landing/pages/ForgotPasswordPage";
import NotFound from "./NotFound";

// Lazy-loaded landing pages (Optimized for rarely used routes)
const ProfilePage = lazy(() => import("./landing/pages/ProfilePage"));
const HousesPage = lazy(() => import("./landing/pages/HousesPage"));
const HousesFormPage = lazy(() => import("./landing/pages/HousesFormPage"));
const HousePage = lazy(() => import("./landing/pages/HousePage"));
const BookingsPage = lazy(() => import("./landing/pages/BookingsPage"));
const OrderFoodsPage = lazy(() => import("./landing/pages/OrderFoodsPage"));
const OrderFoodPage = lazy(() => import("./landing/pages/OrderFoodPage"));
const BookingPage = lazy(() => import("./landing/pages/BookingPage"));
const SearchResultsPage = lazy(() => import("./landing/pages/SearchResultsPage"));
const FavoritesPage = lazy(() => import("./landing/pages/FavoritesPage"));
const BankPage = lazy(() => import("./landing/pages/BankPage"));
const NotificationsPage = lazy(() => import("./landing/pages/NotificationsPage"));
const SupportPage = lazy(() => import("./landing/pages/SupportPage"));
const BookingBus = lazy(() => import("./landing/pages/BookingBus"));
const OrderFood = lazy(() => import("./landing/pages/OrderFood"));
const CreateOrderFood = lazy(() => import("./landing/pages/CreateOrderFood"));
const CartPage = lazy(() => import("./landing/pages/CartPage"));
const SingleFoodPage = lazy(() => import("./landing/pages/SingleFoodPage"));
const ConfirmBookingBus = lazy(() => import("./landing/pages/ConfirmBookingBus"));
const BusTicketsPage = lazy(() => import("./landing/pages/BusTicketsPage"));

import PublicRoutes from "./landing/routing/publicRoutes";
import PrivateRoutes from "./landing/routing/privateRoutes";

// // admin private routes
// import AdminPublicRoutes from "./admin/routing/publicRoutes"
// import AdminPrivateRoutes from "./admin/routing/privateRoutes"

// import AdminResetPassword from "./admin/features/user/ResetPassword"

// // cook private routes
import CookPublicRoutes from "./cooks/routing/publicRoutes";
import CookPrivateRoutes from "./cooks/routing/privateRoutes";

// // driver private routes
// import DriverPublicRoutes from "./drivers/routing/publicRoutes"
// import DriverPrivateRoutes from "./drivers/routing/privateRoutes"

// // owner private routes
// import OwnerPublicRoutes from "./owners/routing/publicRoutes"
// import OwnerPrivateRoutes from "./owners/routing/privateRoutes"

// // Importing pages
// import Layout from "./admin/containers/Layout"
// import Login from "./admin/pages/Login"
// import ForgotPassword from "./admin/pages/ForgotPassword"
// import Register from "./admin/pages/Register"

// // drivers pages
// import DriversLayout from "./drivers/containers/Layout"
// import DriversLogin from "./drivers/pages/Login"
// import DriversRegister from "./drivers/pages/Register"
// import DriversForgotPassword from "./drivers/pages/ForgotPassword"
// import DriversResetPassword from "./drivers/pages/ResetPassword"

// // owners pages
// import OwnersLayout from "./owners/containers/Layout"
// import OwnersLogin from "./owners/pages/Login"
// import OwnersRegister from "./owners/pages/Register"
// import OwnersForgotPassword from "./owners/pages/ForgotPassword"
// import OwnersResetPassword from "./owners/pages/ResetPassword"

// // cooks pages (Lazy-loaded cook routes)
const CooksLayout = lazy(() => import("./cooks/containers/Layout"));
const CooksLogin = lazy(() => import("./cooks/pages/Login"));
const CooksRegister = lazy(() => import("./cooks/pages/Register"));
const CooksForgotPassword = lazy(() => import("./cooks/pages/ForgotPassword"));
const CookResetPassword = lazy(() => import("./cooks/pages/ResetPassword"));
const CookWelcome = lazy(() => import("./cooks/pages/protected/Welcome"));

axios.defaults.baseURL = "http://localhost:5000";
axios.defaults.withCredentials = true;

function App() {
  const { isAuthenticated, checkAuth } = useUserAuthStore();
  const { isCookAuthenticated, checkAuthCook } = useCookAuthStore();

  useEffect(() => {
    checkAuth();
    checkAuthCook();
  }, [checkAuth, checkAuthCook]);

  return (
    <Router>
      <Suspense fallback={<div>Loading...</div>}>
        <Routes>
          {/* **************************************** cooks routes **************************************** */}
          <Route
            path="/cooks/login"
            element={
              isCookAuthenticated ? (
                <Navigate to="/cooks/welcome" />
              ) : (
                <CooksLogin />
              )
            }
          />
          <Route
            path="/cooks/forgot-password"
            element={
              isCookAuthenticated ? (
                <Navigate to="/cooks/welcome" />
              ) : (
                <CooksForgotPassword />
              )
            }
          />
          <Route
            path="/cooks/reset-password"
            element={
              isCookAuthenticated ? (
                <Navigate to="/cooks/welcome" />
              ) : (
                <CookResetPassword />
              )
            }
          />
          <Route
            path="/cooks/register"
            element={
              isCookAuthenticated ? (
                <Navigate to="/cooks/welcome" />
              ) : (
                <CooksRegister />
              )
            }
          />

          <Route path="/cooks/*" element={<CooksLayout />} />

          {/* **************************************** users routes **************************************** */}
          <Route
            path="/login"
            element={
              isAuthenticated ? <Navigate to="/profile" /> : <LoginPage />
            }
          />
          <Route
            path="/register"
            element={
              isAuthenticated ? <Navigate to="/profile" /> : <RegisterPage />
            }
          />
          <Route path="/forgot-password" element={<ForgotPasswordPage />} />

          {/* Main App Routes (With Layout) */}
          <Route element={<IndexLayout />}>
            <Route index element={<IndexPage />} />
            <Route
              path="/profile"
              element={
                isAuthenticated ? <ProfilePage /> : <Navigate to="/login" />
              }
            />
            <Route path="/account/places" element={<HousesPage />} />
            <Route path="/account/places/new" element={<HousesFormPage />} />
            <Route path="/account/places/:id" element={<HousesFormPage />} />
            <Route path="/house/:id" element={<HousePage />} />
            <Route path="/bookings" element={<BookingsPage />} />
            <Route path="/bookings/:id" element={<BookingPage />} />
            <Route path="/order-foods" element={<OrderFoodsPage />} />
            <Route path="/order-foods/:orderId" element={<OrderFoodPage />} />
            <Route path="/search-houses" element={<SearchResultsPage />} />
            <Route path="/favorites" element={<FavoritesPage />} />
            <Route path="/bank" element={<BankPage />} />
            <Route path="/notifications" element={<NotificationsPage />} />
            <Route path="/support" element={<SupportPage />} />
            <Route path="/booking-bus" element={<BookingBus />} />
            <Route
              path="/confirm-bus-ticket/:id"
              element={<ConfirmBookingBus />}
            />
            <Route path="/bus-tickets" element={<BusTicketsPage />} />

            <Route
              path="/cart"
              element={
                isAuthenticated ? <CartPage /> : <Navigate to="/login" />
              }
            />

            <Route path="/order-food" element={<OrderFood />} />
            <Route path="/create-order" element={<CreateOrderFood />} />
            <Route path="/foods/:foodId" element={<SingleFoodPage />} />
          </Route>

          <Route path="*" element={<NotFound />} />
        </Routes>
      </Suspense>
    </Router>
  );
}

export default App;